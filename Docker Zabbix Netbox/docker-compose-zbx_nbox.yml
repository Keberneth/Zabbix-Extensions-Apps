# Compose Specification â€“ no 'version:' key (obsolete with Compose v2)
# Zabbix (server+web+agent) + NetBox (linuxserver.io) with PostgreSQL and Redis
# SELinux-friendly: no bind of host /proc onto container /proc.

services:
  # ------------------------- ZABBIX ---------------------------------
  zbx-postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${ZBX_DB_NAME:-zabbix}
      POSTGRES_USER: ${ZBX_DB_USER:-zabbix}
      POSTGRES_PASSWORD: ${ZBX_DB_PASSWORD:-zabbix_pwd}
    volumes:
      - zbx-pgdata:/var/lib/postgresql/data
    networks: [zabbix-net]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${ZBX_DB_USER:-zabbix} -d ${ZBX_DB_NAME:-zabbix} -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 5

  zabbix-server:
    image: zabbix/zabbix-server-pgsql:alpine-7.4-latest
    environment:
      DB_SERVER_HOST: zbx-postgres
      DB_SERVER_PORT: 5432
      POSTGRES_DB: ${ZBX_DB_NAME:-zabbix}
      POSTGRES_USER: ${ZBX_DB_USER:-zabbix}
      POSTGRES_PASSWORD: ${ZBX_DB_PASSWORD:-zabbix_pwd}
      ZBX_SERVER_NAME: "Zabbix in Docker"
    ports:
      - "10051:10051"
    depends_on:
      zbx-postgres:
        condition: service_healthy
    networks: [zabbix-net]
    restart: unless-stopped

  zabbix-web:
    image: zabbix/zabbix-web-nginx-pgsql:alpine-7.4-latest
    environment:
      ZBX_SERVER_HOST: zabbix-server
      DB_SERVER_HOST: zbx-postgres
      DB_SERVER_PORT: 5432
      POSTGRES_DB: ${ZBX_DB_NAME:-zabbix}
      POSTGRES_USER: ${ZBX_DB_USER:-zabbix}
      POSTGRES_PASSWORD: ${ZBX_DB_PASSWORD:-zabbix_pwd}
      PHP_TZ: ${TZ:-Europe/Stockholm}
    ports:
      - "8080:8080"
      - "8443:8443"
    depends_on:
      - zabbix-server
    networks: [zabbix-net]
    restart: unless-stopped

  zabbix-agent:
    image: zabbix/zabbix-agent2:alpine-7.4-latest
    environment:
      ZBX_SERVER_HOST: zabbix-server
      ZBX_HOSTNAME: ${ZBX_AGENT_HOSTNAME:-zabbix-agent}
    # NOTE: Map host /proc and /sys to NON-/proc paths to avoid SELinux setexeccon write to /proc/thread-self/attr/exec.
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zabbix-server
    networks: [zabbix-net]
    restart: unless-stopped

  # ------------------------- NETBOX ---------------------------------
  nbox-postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${NB_DB_NAME:-netbox}
      POSTGRES_USER: ${NB_DB_USER:-netbox}
      POSTGRES_PASSWORD: ${NB_DB_PASSWORD:-netbox_pwd}
    volumes:
      - nb-pgdata:/var/lib/postgresql/data
    networks: [netbox-net]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${NB_DB_USER:-netbox} -d ${NB_DB_NAME:-netbox} -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 5

  nbox-redis:
    image: redis:7-alpine
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    networks: [netbox-net]
    restart: unless-stopped

  netbox:
    image: lscr.io/linuxserver/netbox:latest
    depends_on:
      nbox-postgres:
        condition: service_healthy
      nbox-redis:
        condition: service_started
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      TZ: ${TZ:-Europe/Stockholm}
      DB_HOST: nbox-postgres
      DB_NAME: ${NB_DB_NAME:-netbox}
      DB_USER: ${NB_DB_USER:-netbox}
      DB_PASSWORD: ${NB_DB_PASSWORD:-netbox_pwd}
      REDIS_HOST: nbox-redis
      SECRET_KEY: ${NB_SECRET_KEY}
      # optional bootstrap of admin user
      SUPERUSER_NAME: ${NB_SUPERUSER_NAME:-admin}
      SUPERUSER_EMAIL: ${NB_SUPERUSER_EMAIL:-admin@example.com}
      SUPERUSER_PASSWORD: ${NB_SUPERUSER_PASSWORD}
    volumes:
      - nb-config:/config
    ports:
      - "8000:8000"
    networks: [netbox-net]
    restart: unless-stopped

# --------------------------- STORAGE & NETWORKS ------------------------------
volumes:
  zbx-pgdata:
  nb-pgdata:
  nb-config:

networks:
  zabbix-net:
  netbox-net:
